name: Build
'on':
  push:
    branches:
      - '*'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build and analyze
        env:
          GITHUB_TOKEN: bcebcbfbcdcecbccfaabacdbdbbccabbff
          SONAR_TOKEN: 811c9a490983734401ba4e491eaefc8bfa7281de
        run: >-
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=iamneo-production_bcebcbfbcdcecbccfaabacdbdbbccabbff
          -Dsonar.login=811c9a490983734401ba4e491eaefc8bfa7281de
      - name: Trigger API
        if: always()
        env:
          API_URL: 'https://api.examly.io/api/updateSonarQubeForNonTeams'
        run: >
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d '/' -f 2)

          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          GITHUB_USERNAME=$GITHUB_ACTOR

          API_PAYLOAD="{ \"repo_id\": \"$REPO_NAME\", \"branch_name\":
          \"$BRANCH_NAME\", \"github_username\": \"$GITHUB_USERNAME\" }"

          curl -X POST -H "Content-Type: application/json" -d "$API_PAYLOAD"
          $API_URL
import io.cucumber.java.en.*;

public class RegistrationStepDefinitions {

    @Given("user on the user registration page")
    public void navigateToRegistrationPage() {
        // Code to navigate to the user registration page
    }

    @When("user enters a valid user name")
    public void enterValidUserName() {
        // Code to enter a valid user name
    }

    @And("valid e-mail address")
    public void enterValidEmailAddress() {
        // Code to enter a valid email address
    }

    @And("valid password")
    public void enterValidPassword() {
        // Code to enter a valid password
    }

    @And("valid confirmation password")
    public void enterValidConfirmationPassword() {
        // Code to enter a valid confirmation password
    }

    @And("valid Birth-date")
    public void enterValidBirthDate() {
        // Code to enter a valid birth date
    }

    @And("valid Gender")
    public void selectValidGender() {
        // Code to select a valid gender
    }

    @And("valid phone number")
    public void enterValidPhoneNumber() {
        // Code to enter a valid phone number
    }

    @Then("user registration should be successful")
    public void verifyRegistrationSuccessful() {
        // Code to verify that user registration is successful
    }
}

